// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using S4_Back_End_API.Data;

#nullable disable

namespace S4_Back_End_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221009060725_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("S4_Back_End_API.Models.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int>("AppUserRoleUserRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SignUpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPicturePath")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("UserId");

                    b.HasIndex("AppUserRoleUserRoleId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.AppUserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"), 1L, 1);

                    b.Property<string>("UserRoleDescription")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserRoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.DietType", b =>
                {
                    b.Property<int>("DietTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DietTypeId"), 1L, 1);

                    b.Property<string>("DietTypeDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DietTypeId");

                    b.ToTable("DietTypes");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.DifficultyLevel", b =>
                {
                    b.Property<int>("DifficultyLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DifficultyLevelId"), 1L, 1);

                    b.Property<string>("DifficultyLevelDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DifficultyLevelId");

                    b.ToTable("DifficultyLevels");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Flavor", b =>
                {
                    b.Property<int>("FlavorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlavorId"), 1L, 1);

                    b.Property<string>("FlavorDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FlavorId");

                    b.ToTable("Flavors");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"), 1L, 1);

                    b.Property<string>("IngredientAmount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IngredientDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeId"), 1L, 1);

                    b.Property<int>("AppUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("int");

                    b.Property<int>("FlavorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastEditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("int");

                    b.Property<string>("RecipePicturePath")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("RecipeSteps")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RecipeTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TimeOfDayId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalLikes")
                        .HasColumnType("int");

                    b.HasKey("RecipeId");

                    b.HasIndex("AppUserUserId");

                    b.HasIndex("DifficultyLevelId");

                    b.HasIndex("FlavorId");

                    b.HasIndex("TimeOfDayId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Recipe_DietType", b =>
                {
                    b.Property<int>("RecipeDietTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeDietTypeId"), 1L, 1);

                    b.Property<int>("DietTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("RecipeDietTypeId");

                    b.HasIndex("DietTypeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Recipe_DietTypes");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Recipe_User_Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"), 1L, 1);

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe_User_Likes");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Recipe_User_Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"), 1L, 1);

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe_User_Matches");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.TimeOfDay", b =>
                {
                    b.Property<int>("TimeOfDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeOfDayId"), 1L, 1);

                    b.Property<string>("TimeOfDayDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TimeOfDayId");

                    b.ToTable("TimeOfDays");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.AppUser", b =>
                {
                    b.HasOne("S4_Back_End_API.Models.AppUserRole", "AppUserRole")
                        .WithMany()
                        .HasForeignKey("AppUserRoleUserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserRole");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Ingredient", b =>
                {
                    b.HasOne("S4_Back_End_API.Models.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Recipe", b =>
                {
                    b.HasOne("S4_Back_End_API.Models.AppUser", "AppUser")
                        .WithMany("Recipes")
                        .HasForeignKey("AppUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S4_Back_End_API.Models.DifficultyLevel", "DifficultyLevel")
                        .WithMany()
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S4_Back_End_API.Models.Flavor", "Flavor")
                        .WithMany()
                        .HasForeignKey("FlavorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S4_Back_End_API.Models.TimeOfDay", "TimeOfDay")
                        .WithMany()
                        .HasForeignKey("TimeOfDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("DifficultyLevel");

                    b.Navigation("Flavor");

                    b.Navigation("TimeOfDay");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Recipe_DietType", b =>
                {
                    b.HasOne("S4_Back_End_API.Models.DietType", "DietType")
                        .WithMany("Recipe_DietTypes")
                        .HasForeignKey("DietTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("S4_Back_End_API.Models.Recipe", "Recipe")
                        .WithMany("Recipe_DietTypes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietType");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Recipe_User_Like", b =>
                {
                    b.HasOne("S4_Back_End_API.Models.Recipe", "Recipe")
                        .WithMany("Recipe_User_Likes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("S4_Back_End_API.Models.AppUser", "AppUser")
                        .WithMany("Recipe_User_Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Recipe_User_Match", b =>
                {
                    b.HasOne("S4_Back_End_API.Models.Recipe", "Recipe")
                        .WithMany("Recipe_User_Matches")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("S4_Back_End_API.Models.AppUser", "AppUser")
                        .WithMany("Recipe_User_Matches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.AppUser", b =>
                {
                    b.Navigation("Recipe_User_Likes");

                    b.Navigation("Recipe_User_Matches");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.DietType", b =>
                {
                    b.Navigation("Recipe_DietTypes");
                });

            modelBuilder.Entity("S4_Back_End_API.Models.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Recipe_DietTypes");

                    b.Navigation("Recipe_User_Likes");

                    b.Navigation("Recipe_User_Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
